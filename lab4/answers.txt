# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Abhijoy Saha
Student ID: 004252758
Email: abhijoysaha25@gmail.com

# Partner 2 (if you're working in a team)
Name: Jasmine Mok
Student ID: 604283974
Email: jasminemok@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We forked a new process for each download or upload task.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

We fixed filename transfer by setting the strcpy to strncpy, this let me define the size of transfer.
Then we set the last character to the null byte to prevent buffer overrun.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

We added a MAXFILESIZ to 1000000, which is slightly bigger than cat1.jpg, cat2.jpg and cat3.jpg. Whenever the total_written is greater than equal to MAXFILESIZ, we tell the task to tryagain.

We changed the TASKBUFSIZ to 8249, fix the run-popular bug of "tracker connection closed prematurely!". This is done to allow more connections.

We compared absolute pathname of the current directory and the requested directory and displayed an error if they differ. That shows that it is trying to access a file in a different directory than the current one.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

We made the file open a different file than intended for upload, hence, the peer who is requesting the file will get the wrong file which could also be a virus.

We caused a TBUFF_ERROR, by write to the peer until the error occured. We send an infinite amount of data until peer's buffer is overloaded with data causing the peer's harddrive to overflow. The data we send is also the incorrect data, hence the file is also corrupted.

We tried causing a segmentation fault by increasing the filename with jibberish to overflow it's buffer and eventually crash the peer.

Thank you so much for your help Tuan, but while testing problem 3 the servers were down too often and caused us great difficulty as we could test only every 3-4 hours.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
